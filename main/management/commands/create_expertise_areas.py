from django.core.management.base import BaseCommand
from main.models import ExpertiseArea  # Импортируем существующую модель

class Command(BaseCommand):
    help = 'Создает предустановленные области экспертизы'

    def handle(self, *args, **options):
        # Данные для вставки областей экспертизы
        EXPERTISE_AREAS = [
            # Школьные предметы
            {"name": "Математика", "description": "Алгебра, геометрия, математический анализ, статистика"},
            {"name": "Физика", "description": "Механика, электродинамика, термодинамика, оптика, квантовая физика"},
            {"name": "Химия", "description": "Органическая, неорганическая, аналитическая химия"},
            {"name": "Биология", "description": "Ботаника, зоология, анатомия, генетика, экология"},
            {"name": "История", "description": "Древний мир, средние века, новое время, новейшая история"},
            {"name": "География", "description": "Физическая география, экономическая география, геология"},
            {"name": "Литература", "description": "Русская и мировая литература, литературоведение"},
            {"name": "Русский язык", "description": "Грамматика, стилистика, лингвистика"},
            {"name": "Иностранные языки", "description": "Английский, немецкий, французский, испанский, китайский и другие"},
            
            # Высшее образование и профессиональные области
            {"name": "Программирование", "description": "Языки программирования, алгоритмы, структуры данных"},
            {"name": "Веб-разработка", "description": "HTML, CSS, JavaScript, фреймворки, CMS"},
            {"name": "Базы данных", "description": "SQL, NoSQL, проектирование БД, оптимизация"},
            {"name": "Искусственный интеллект", "description": "Машинное обучение, нейронные сети, обработка естественного языка"},
            {"name": "Кибербезопасность", "description": "Защита информации, криптография, этичный хакинг"},
            {"name": "Экономика", "description": "Микро- и макроэкономика, финансовый анализ, инвестиции"},
            {"name": "Право", "description": "Гражданское, уголовное, административное право"},
            {"name": "Медицина", "description": "Анатомия, физиология, терапия, хирургия"},
            {"name": "Психология", "description": "Общая психология, психология личности, клиническая психология"},
            {"name": "Философия", "description": "История философии, этика, логика, метафизика"},
            {"name": "Архитектура", "description": "История архитектуры, проектирование, урбанистика"},
            {"name": "Дизайн", "description": "Графический дизайн, UI/UX, промышленный дизайн"},
            
            # Творчество и искусство
            {"name": "Музыка", "description": "Теория музыки, история музыки, обучение игре на инструментах"},
            {"name": "Изобразительное искусство", "description": "Живопись, графика, скульптура, история искусства"},
            {"name": "Фотография", "description": "Техника фотографии, обработка, композиция"},
            {"name": "Кинематограф", "description": "История кино, режиссура, сценарное мастерство"},
            {"name": "Театр", "description": "История театра, актерское мастерство, режиссура"},
            
            # Спорт и активный образ жизни
            {"name": "Фитнес", "description": "Тренировки, питание, реабилитация"},
            {"name": "Командные виды спорта", "description": "Футбол, баскетбол, волейбол и другие"},
            {"name": "Индивидуальные виды спорта", "description": "Теннис, плавание, легкая атлетика и другие"},
            {"name": "Боевые искусства", "description": "Карате, дзюдо, бокс, ММА и другие"},
            {"name": "Йога", "description": "Асаны, пранаяма, медитация, философия йоги"},
            
            # Дом и быт
            {"name": "Кулинария", "description": "Рецепты, техники приготовления, национальные кухни"},
            {"name": "Садоводство", "description": "Выращивание растений, ландшафтный дизайн"},
            {"name": "Ремонт и DIY", "description": "Строительство, отделка, изготовление мебели"},
            {"name": "Шитье и рукоделие", "description": "Кройка и шитье, вязание, вышивка, макраме"},
            
            # Другое
            {"name": "Путешествия", "description": "Страноведение, советы путешественникам, бэкпекинг"},
            {"name": "Экология", "description": "Устойчивое развитие, охрана природы, экологичный образ жизни"},
            {"name": "Технологии", "description": "Обзоры гаджетов, новые технологии, технические тренды"},
            {"name": "Блогинг", "description": "Создание контента, монетизация, продвижение"}
        ]

        created_count = 0
        updated_count = 0

        for area_data in EXPERTISE_AREAS:
            obj, created = ExpertiseArea.objects.get_or_create(
                name=area_data["name"],
                defaults={"description": area_data["description"]}
            )
            if created:
                created_count += 1
            else:
                # Обновить описание, если объект уже существует
                if obj.description != area_data["description"]:
                    obj.description = area_data["description"]
                    obj.save()
                    updated_count += 1
        
        self.stdout.write(self.style.SUCCESS(f'Создано {created_count} новых областей экспертизы'))
        if updated_count > 0:
            self.stdout.write(self.style.SUCCESS(f'Обновлено {updated_count} существующих областей экспертизы'))